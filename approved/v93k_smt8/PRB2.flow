flow PRB2 {
    in EXTRA_TESTS = false;

    setup {
        suite erase_all calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_3 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite mrd_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.mrd_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite mrd_ckbd_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.mrd_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite pgm_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.pgm_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite pgm_ckbd_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.pgm_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

    }

    execute {

        erase_all.execute();
        margin_read1_all1.execute();
        erase_all_1.execute();
        margin_read1_all1_1.execute();
        // *******************************************************
        // GROUP - prb2_main
        // *******************************************************
            pgm_ckbd.execute();
            mrd_ckbd.execute();
        // *******************************************************
        // /GROUP - prb2_main
        // *******************************************************
        erase_all_2.execute();
        margin_read1_all1_2.execute();
        if (EXTRA_TESTS == true) {
            // *******************************************************
            // GROUP - prb2_main_2
            // *******************************************************
                pgm_ckbd_1.execute();
                mrd_ckbd_1.execute();
            // *******************************************************
            // /GROUP - prb2_main_2
            // *******************************************************
        } else {
        }
        margin_read1_all1_3.execute();
    }
}
