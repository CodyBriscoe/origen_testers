flow PRB1 {

    setup {
        suite bitcell_iv_0 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.bitcell_iv_0);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite bitcell_iv_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.bitcell_iv_1);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite bitcell_iv_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.bitcell_iv_2);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite bitmap_all0 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.bitmap_all0);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.erase_all);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read0_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.margin_read0_ckbd);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.margin_read1_ckbd);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite normal_read_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.normal_read_ckbd);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(OrigenTesters.patterns.program_ckbd);
            measurement.specification = setupRef(OrigenTesters.specs.specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        flow PRB1_MAIN calls OrigenTesters.flows.prb1.PRB1_MAIN { }
    }

    execute {

        PRB1_MAIN.execute();
    }
}
