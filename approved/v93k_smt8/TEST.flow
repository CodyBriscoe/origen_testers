flow TEST {

    setup {
        suite meas_read_pump calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_1 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_2 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_3 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_4 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_5 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_6 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_7 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_8 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

        suite meas_read_pump_9 calls dc_tml.DcTest.GeneralPMU {
            measurement.pattern = setupRef(patterns.meas_read_pump);
            measurement.specification = setupRef(specs.Nominal);
            forceMode = "VOLT";
            forceValue = "3.8[V]";
            measureMode = "PPMUpar";
            output = "None";
            pinlist = "@";
            ppmuClampHigh = "0[V]";
            ppmuClampLow = "0[V]";
            precharge = "OFF";
            prechargeVoltage = "0[V]";
            relaySwitchMode = "DEFAULT(BBM)";
            settlingTime = "0[s]";
            spmuClamp = "0[A]";
            termination = "OFF";
            testName = "passLimit_uA_mV";
            testerState = "CONNECTED";
        }

    }

    execute {

        meas_read_pump.execute();
        if (meas_read_pump.pass) {
        } else {
            addBin(2);
        }
        meas_read_pump_1.execute();
        if (meas_read_pump_1.pass) {
        } else {
            addBin(2);
        }
        meas_read_pump_2.execute();
        if (meas_read_pump_2.pass) {
        } else {
            addBin(2);
        }
        meas_read_pump_3.execute();
        if (meas_read_pump_3.pass) {
        } else {
            addBin(2);
        }
        meas_read_pump_4.execute();
        if (meas_read_pump_4.pass) {
        } else {
            addBin(2);
        }
        meas_read_pump_5.execute();
        meas_read_pump_6.execute();
        meas_read_pump_7.execute();
        meas_read_pump_8.execute();
        if (meas_read_pump_8.pass) {
        } else {
            addBin(2);
        }
        meas_read_pump_9.execute();
        if (meas_read_pump_9.pass) {
        } else {
            addBin(2);
        }
    }
}
