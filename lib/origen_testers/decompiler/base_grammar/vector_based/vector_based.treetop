module OrigenTesters
  module Decompiler
    module BaseGrammar
    
      # BaseVectorBased grammar is a collection of rules, processors, and nodes
      # that are geared specifically towards vector-based platforms and will
      # have little usage outside and applicability outside of this.
      grammar VectorBased
        include OrigenTesters::Decompiler::BaseGrammar::Tokens
        
        rule comment_block
          comment+ <CommentBlock> {
            def to_ast
              n(:comment_block, *elements_to_ast)
            end
          }
        end

        rule comment
          comment_start:comment_start comment:newline_delimited_text newline <Comment> {
            def to_ast
              n(:comment, comment_start.text_value + comment.text_value)
            end
          }
    	  end
        
        rule line_comment
          comment
        end

        rule pin_names
          pin_name? (pin_name_separator pin_name)* <PinNames>
        end
        
        rule pin_name
          [A-Za-z_0-9]+ <PinName>
        end
        
        # This will match pin states and consume the separator EXCEPT for the final separator, if provided.
        # This will allow error detection in the event of extra separators, e.g.: 'X,X,X,' -> 'X,X,X' ','
        rule pin_states
          pin_state? (pin_state_separator pin_state)* <PinStates>
        end
        
        rule pin_state
          [A-Za-z_0-9-]+ <PinState>
        end
        
        rule timeset
          [A-Za-z_0-9]+ '' <Timeset>
        end

      end
    end
  end
end
