# Disclaimer: this is only starting point/subset of the AVC format. Additions can be made here and in 
# the nodes to accommodate other featurs. 
# For licensed Advantest users, topic #37557 of the TDR defines the AVC file format.

module OrigenTesters
  module SmartestBasedTester
    module Decompiler
      grammar Avc
        include OrigenTesters::Decompiler::BaseGrammar::VectorBased
        include OrigenTesters::SmartestBasedTester::Decompiler::Avc::PlatformTokens
      
        rule frontmatter
          (comment_block / whitespace)* <Frontmatter>
        end

        # According to the TDR, comments inside of the FORMAT statement are not defined.
        rule pinlist
          'FORMAT' spacing pin_names spacing? ';' spacing? newline <Pinlist>
        end

        rule pin_state_separator
          ' ' <PinStateSeparator>
        end

        rule pin_name_separator
          ' ' <PinNameSeparator>
        end

        # Override the pin state rule to catch anything except a space and semicolon to account for any comments in the pattern
        rule pin_state
          [^; ]* <PinState>
        end

        rule vector_types
          (comment_block / vector / sequencer_instruction / newline)
        end

        rule vector
          repeat spacing timeset spacing pin_states ';' newline <Vector> {
            def to_ast
              n(:vector, *elements_to_ast)
            end
          }
        end
        
        rule repeat
          'R' repeat:base10_integer <Repeat> {
            def to_ast
              n(:repeat, repeat.text_value)
            end
          }
        end

        # Sequencer Instruction
        # According to the TDR, sequencer instructions do not support trailing comments
        # However, the TDR also only shows 2 parameters, but we'll support a full list structure.
        rule sequencer_instruction
          sequencer_instr:sequencer_instr spacing? sequencer_args:sequencer_args ';' spacing? newline <SequencerInstruction> {
            def to_ast
              n(:sequencer_instruction, sequencer_instr.text_value, sequencer_args.text_value)
            end
          }
        end
 
        rule sequencer_instr
          word ''
        end
        
        rule sequencer_args
          word? (' ' word)*
        end
        
      end
    end
  end
end

