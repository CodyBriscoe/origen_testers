% render "layouts/guides.html" do

Origen encourages an agile approach to documentation and pattern generation is
no exception.
Tools are provided to create test patterns that are self-documenting and by taking
a little care you can produce very detailed (and of course 100% accurate) documentation
of your test patterns for free.

The pattern generation command has the following switches:

~~~text
origen g bistcom           # Generate a regular pattern
origen g bistcom --doc     # Output documentation of that pattern to the terminal
origen g bistcom --html    # Generate pre-formatted HTML documentation for inclusion in a web page
~~~

The following methods are available to control the documentation output from the pattern
generator...

#### Debug Documentation

Comments that may help with debug of patterns on the tester can be injected into
the pattern via the <code>cc</code> method, as with all methods related to
pattern documentation this is globally available.

~~~ruby
cc "Entering test mode now"
test.mode.write!(RAMBIST_MODE)
reset!
~~~

The method argument is a regular string and dynamic segments can be embedded and
formatted using any regular Ruby.

~~~ruby
delay_cycles = 100
cc "Wait for #{delay_cycles} cycles for the mode to latch"

address = 0x12
cc "Set the target address to: 0x%04X" % address
~~~

This will produce pattern output that looks like this:

~~~text
// Wait for 100 cycles for the mode to latch
// Set the target address to 0x0012
~~~

<code>c1</code> is an alias for <code>cc</code>.

These low level comments will appear in the pattern but they will not be included
when a document of the pattern is generated.

A <code>c2</code> method is available to elevate the importance of a subset of
these low level comments
such that they will be included in generated documentation.

~~~ruby
cc "You won't see me in the docs"
c1 "Or me"
c2 "But you will see me!"
~~~

#### Documenting Major Steps

Major steps in the pattern can be highlighted using the <code>ss</code> method.

~~~ruby
ss "Enter RAM BIST mode"

# A block form is also available
ss do
  vdd_core = 1.7
  cc "Enter RAM BIST mode with the following options:"
  cc "  Vdd core - #{vdd_core}v"
end
~~~

This will produce the following output in the pattern:

~~~text
// #######################################################################
// # Enter RAM BIST mode
// #######################################################################

// #######################################################################
// # Enter RAM BIST mode with the following options:
// #   Vdd core - 1.7v
// #######################################################################
~~~

Any comments defined in this way are considered more important than the regular
<code>cc</code> comments and they will be automatically included in the
generated documentation.

#### Documenting Structure

When presenting documentation it is useful to know something about the structure
of the pattern, this allows vectors to be grouped into sections like 'startup', 
'shutdown', etc.

Such structure can be described using the <code>pp</code> method:

~~~ruby
pp "Startup" do
  $dut.enter_ram_bist_mode
  $dut.ram.configure_for_test
end

def enter_ram_bist_mode
  pp "Enter RAM BIST mode" do
    # Mode entry code here...
  end
end  
~~~

This would produce comments in the pattern that look like this:

~~~text
// #######################################################################
// # Startup
// #######################################################################

// #######################################################################
// # Enter RAM BIST mode
// #######################################################################
~~~

However this difference vs. the <code>ss</code> method is that information about
the structure has been provided - it can be determined that the enter RAM bist
section is a sub-section of the wider startup sequence.

This comes into play when the pattern documentation is generated as HTML,
now we will see something like this (click to expand):

<div class="panel-group">
<div class="panel panel-default">
<div class="panel-heading clickable" data-toggle="collapse" data-parent="#panel2" href="#collapseComment1">
<a class="no-underline">
Startup
</a>
</div>
<div id="collapseComment1" class="panel-collapse collapse">
<div class="panel-body" markdown="1">

<div class="panel panel-default">
<div class="panel-heading clickable" data-toggle="collapse" data-parent="#panel2" href="#collapseComment2">
  <a class="no-underline">
  Enter RAM BIST mode
  </a>
</div>
<div id="collapseComment2" class="panel-collapse collapse">
<div class="panel-body" markdown="1">

~~~text
# Some comments generated by the RAM BIST entry sequence
~~~

</div>
</div>
</div>
</div>
</div>
</div>
</div>

#### Adding Annotations

Sometimes it will be helpful to add some annotations to describe what sections
of the pattern are doing, this can be done via the <code>annotate</code>
method.

Any annotations will not be output in the actual pattern but will be included
in generated documentation.

Here is the above example with some annotations added:

~~~ruby
pp "Startup" do
  annotate "Perform startup operations that are common to all patterns."
  $dut.enter_ram_bist_mode
  $dut.ram.configure_for_test
end

def enter_ram_bist_mode
  pp "Enter RAM BIST mode" do

    annotate <<-END
      This is an example of a multi-line annotation. Anything you write here
      will be parsed as markdown, so you can do things like:

      * Create bullet
      * Lists

      ~~~ruby
      # Embed some code examples
      $dut.enter_ram_bist_mode
      ~~~

      Or create [links](http://origen.freescale.net)
    END

    # Mode entry code here...
  end
end  
~~~

This would produce the following snippet of documentation:



<div class="panel-group">
<div class="panel panel-default">
<div class="panel-heading clickable" data-toggle="collapse" data-parent="#panel2" href="#collapseComment3">
<a class="no-underline">
Startup
</a>
</div>
<div id="collapseComment3" class="panel-collapse collapse">
<div class="panel-body" markdown="1">

Perform startup operations that are common to all patterns.

<div class="panel panel-default">
<div class="panel-heading clickable" data-toggle="collapse" data-parent="#panel2" href="#collapseComment4">
<a class="no-underline">
Enter RAM BIST mode
</a>
</div>
<div id="collapseComment4" class="panel-collapse collapse">
<div class="panel-body" markdown="1">

This is an example of a multi-line annotation. Anything you write here
will be parsed as markdown, so you can do things like:

* Create bullet
* Lists

~~~ruby
# Embed some code examples
$dut.enter_ram_bist_mode
~~~

Or create [links](http://origen.freescale.net)

~~~text
# Some comments generated by the RAM BIST entry sequence
~~~

</div>
</div>
</div>
</div>
</div>
</div>
</div>


#### Summarizing Long Sections

Sometimes it is not necessary to list out every comment or operation when documenting 
a pattern. For example if the pattern downloads some functional code to be executing
on the chip it is not really necessary to include the entire code download in the
pattern document.

For these scenarios a <code>snip</code> method is available which will output the
given number of documentation lines and then enter a message to indicate that
the remainder of the output has been snipped for efficiency.

Here is an example of how to use it, here the comments generated by the contained
section will be limited to 10 lines:

~~~ruby
  snip 10 do
    # Download some verbose LRE code here
  end
~~~

% end
