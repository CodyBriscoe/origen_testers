# Base grammar. This can be imported by various platforms, then overriden as needed.

module OrigenTesters
  module Decompiler
    grammar BaseGrammar
      #rule pin_states
      #end
      
      #rule pin_state
      #  word <PinState>
      #end
      
      #rule pin
      #end

      rule comment_block
        comment+ <CommentBlock>
      end

      rule comment
        comment_start newline_delimited_text newline <Comment>
      end
      
      rule line_comment
        comment
      end

      rule underscore
        '_' <UnderscoreToken>
      end
      
      rule whitespace
        [' '\t\n\r]+ <WhitespaceToken>
      end
      
      rule tab
        "\t" <TabToken>
      end
      
      rule spacing
        [' '\t]+ <SpacingToken>
      end
      
      rule newline
        "\r"? "\n"? <NewlineToken>
      end
      
      rule decimal_integer
        [0-9]+ <DecimalIntegerToken>
      end
      
      rule word
        [A-Za-z_0-9]+ <WordToken>
      end
      
      rule newline_delimited_text
        [^\n\r]* <NewlineDelimitedTextToken>
      end
      
      rule semicolon_delimited_text
        [^;]* <SemicolonDelimitedTextToken>
      end

      rule pin_names
        pin_name? (pin_name_separator pin_name)* <PinNames>
      end
      
      rule pin_name
        [A-Za-z_0-9]+ <PinName>
      end

      #rule pin_name_separator
      #  ' ' <PinNameSeparator>
      #end
      
      # This will match pin states and consume the separator EXCEPT for the final separator, if provided.
      # This will allow error detection in the event of extra separators, e.g.: 'X,X,X,' -> 'X,X,X' ','
      rule pin_states
        pin_state? (pin_state_separator pin_state)* <PinStates>
      end
      
      rule pin_state
        [A-Za-z_0-9]+ <PinState>
      end
      
        rule timeset
          [A-Za-z_0-9]+ '' <Timeset>
        end

      
    end
  end
end

