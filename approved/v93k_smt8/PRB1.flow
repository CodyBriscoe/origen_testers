flow PRB1 {
    in ADDITIONAL_ERASE = false;
    in ALARMENABLED = false;
    in DO_ERASE = false;
    in JOB = "";
    in NO_EXTRA_ERASE = false;
    in USB_XCVR_CZ = false;

    setup {
        suite another_not_p1_or_p2_test calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.another_not_p1_or_p2_test);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite bitcell_iv_0 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.bitcell_iv_0);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite bitcell_iv_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.bitcell_iv_1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite bitcell_iv_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.bitcell_iv_2);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite bitmap_all0 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.bitmap_all0);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_10 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_11 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_12 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_13 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_14 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_15 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_16 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_17 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_18 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_19 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_20 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_21 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_22 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_23 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_24 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_25 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_26 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_27 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_28 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_29 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_3 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_30 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_31 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_32 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_33 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_34 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_35 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_36 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_37 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_38 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_39 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_4 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_40 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_41 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_5 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_6 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_7 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_8 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite erase_all_9 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.erase_all);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read0_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read0_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read0_ckbd_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read0_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_10 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_11 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_12 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_13 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_14 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_15 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_16 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_17 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_18 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_19 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_20 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(cz);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_3 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_4 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_5 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_6 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_7 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_8 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_all1_9 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_all1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite margin_read1_ckbd_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.margin_read1_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite normal_read_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.normal_read_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite not_p1_or_p2_test calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.not_p1_or_p2_test);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite not_p1_test calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.not_p1_test);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite p1_only_test calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.p1_only_test);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite p1_or_p2_only_test calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.p1_or_p2_only_test);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite por_ins calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.por_ins);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_10 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b2);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_11 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b0);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_12 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_13 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b2);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_14 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b0);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_15 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_16 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b2);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_17 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_3 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_4 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_5 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b0);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_6 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_7 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b2);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_8 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b0);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite program_ckbd_9 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.program_ckbd_b1);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite some_func_test calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.some_func_test);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite xcvr_fs_vilvih calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.xcvr_fs_vilvih);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite xcvr_fs_vilvih_1 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.xcvr_fs_vilvih);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite xcvr_fs_vilvih_2 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.xcvr_fs_vilvih);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

        suite xcvr_fs_vilvih_3 calls ac_tml.AcTest.FunctionalTest {
            measurement.pattern = setupRef(patterns.xcvr_fs_vilvih);
            measurement.specification = setupRef(specs.Nominal);
            output = "None";
            testName = "Functional";
        }

    }

    execute {
        var ERASE_PASSED_1_AB74CCF_PASSED = false;
        var ERASE_PASSED_2_AB74CCF_PASSED = false;
        var ERASE_PASSED_3_AB74CCF_FAILED = false;
        var ERASE_PASSED_4_AB74CCF_FAILED = false;
        var ERASE_FAILED_1_AB74CCF_FAILED = false;
        var ERASE_FAILED_2_AB74CCF_FAILED = false;
        var ERASE_FAILED_3_AB74CCF_PASSED = false;
        var ERASE_FAILED_4_AB74CCF_PASSED = false;
        var ERASE_RAN_1_AB74CCF_RAN = false;
        var ERASE_RAN_2_AB74CCF_RAN = false;
        var ERASE_RAN_3_AB74CCF_RAN = false;
        var ERASE_RAN_4_AB74CCF_RAN = false;
        var G200_AB74CCF_FAILED = false;
        var G100_AB74CCF_RAN = false;

        // *******************************************************
        // GROUP - prb1_main
        // *******************************************************
            program_ckbd.execute();
            if (program_ckbd.pass) {
            } else {
                addBin(1100);
            }
            margin_read1_ckbd.execute();
            margin_read0_ckbd.execute();
            // *******************************************************
            // GROUP - erase
            // *******************************************************
                erase_all.execute();
                erase_all_1.execute();
                erase_all_2.execute();
                erase_all_3.execute();
                erase_all_4.execute();
                erase_all_5.execute();
                // *******************************************************
                // GROUP - erase_vfy
                // *******************************************************
                    margin_read1_all1.execute();
                // *******************************************************
                // /GROUP - erase_vfy
                // *******************************************************
            // *******************************************************
            // /GROUP - erase
            // *******************************************************
            println("Should be v1");
            program_ckbd_1.execute();
            println("Should be v2");
            program_ckbd_2.execute();
            println("Should be v1");
            program_ckbd_3.execute();
            println("Should be v2");
            program_ckbd_4.execute();
            println("Should be a v1 test instance group");
            // *******************************************************
            // GROUP - program_ckbd
            // *******************************************************
                program_ckbd_5.execute();
                program_ckbd_6.execute();
                program_ckbd_7.execute();
            // *******************************************************
            // /GROUP - program_ckbd
            // *******************************************************
            println("Should be a v2 test instance group");
            // *******************************************************
            // GROUP - program_ckbd_2
            // *******************************************************
                program_ckbd_8.execute();
                program_ckbd_9.execute();
                program_ckbd_10.execute();
            // *******************************************************
            // /GROUP - program_ckbd_2
            // *******************************************************
            println("Should be a v1 test instance group");
            // *******************************************************
            // GROUP - program_ckbd_3
            // *******************************************************
                program_ckbd_11.execute();
                program_ckbd_12.execute();
                program_ckbd_13.execute();
            // *******************************************************
            // /GROUP - program_ckbd_3
            // *******************************************************
            println("Should be a v2 test instance group");
            // *******************************************************
            // GROUP - program_ckbd_4
            // *******************************************************
                program_ckbd_14.execute();
                program_ckbd_15.execute();
                program_ckbd_16.execute();
            // *******************************************************
            // /GROUP - program_ckbd_4
            // *******************************************************
            if (JOB == "P1") {
                p1_only_test.execute();
            } else {
            }
            if ((JOB == "P1") || (JOB == "P2")) {
                p1_or_p2_only_test.execute();
            } else {
            }
            if (JOB == "P1") {
            } else {
                not_p1_test.execute();
            }
            if ((JOB == "P1") || (JOB == "P2")) {
            } else {
                not_p1_or_p2_test.execute();
                another_not_p1_or_p2_test.execute();
            }
            println("Verify that a test with an external instance works");
            por_ins.execute();
            println("Verify that a request to use the current context works");
            if (JOB == "P1") {
                erase_all_6.execute();
                erase_all_7.execute();
                erase_all_8.execute();
            } else {
            }
            if (JOB == "P2") {
            } else {
                erase_all_9.execute();
            }
            erase_all_10.execute();
            margin_read1_all1_1.execute();
            if (margin_read1_all1_1.pass) {
            } else {
                erase_all_11.execute();
            }
            margin_read1_all1_2.execute();
            if (margin_read1_all1_2.pass) {
            } else {
                erase_all_12.execute();
            }
            margin_read1_all1_3.execute();
            if (margin_read1_all1_3.pass) {
            } else {
                erase_all_13.execute();
            }
            margin_read1_all1_4.execute();
            if (margin_read1_all1_4.pass) {
            } else {
                erase_all_14.execute();
            }
            margin_read1_all1_5.execute();
            if (margin_read1_all1_5.pass) {
            } else {
                erase_all_15.execute();
            }
            margin_read1_all1_6.execute();
            println("Test if enable");
            if (DO_ERASE == true) {
                erase_all_16.execute();
                erase_all_17.execute();
            } else {
            }
            println("Test unless enable");
            if (NO_EXTRA_ERASE == true) {
            } else {
                erase_all_18.execute();
                erase_all_19.execute();
                erase_all_20.execute();
            }
            erase_all_21.execute();
            erase_all_22.execute();
            println("Test if_passed");
            erase_all_23.execute();
            if (erase_all_23.pass) {
                ERASE_PASSED_1_AB74CCF_PASSED = true;
            } else {
            }
            erase_all_24.execute();
            if (erase_all_24.pass) {
                ERASE_PASSED_2_AB74CCF_PASSED = true;
            } else {
            }
            if (ERASE_PASSED_1_AB74CCF_PASSED == true) {
                margin_read1_all1_7.execute();
            } else {
            }
            if (ERASE_PASSED_2_AB74CCF_PASSED == true) {
                margin_read1_all1_8.execute();
            } else {
            }
            println("Test unless_passed");
            erase_all_25.execute();
            if (erase_all_25.pass) {
            } else {
                ERASE_PASSED_3_AB74CCF_FAILED = true;
            }
            erase_all_26.execute();
            if (erase_all_26.pass) {
            } else {
                ERASE_PASSED_4_AB74CCF_FAILED = true;
            }
            if (ERASE_PASSED_3_AB74CCF_FAILED == true) {
                margin_read1_all1_9.execute();
            } else {
            }
            if (ERASE_PASSED_4_AB74CCF_FAILED == true) {
                margin_read1_all1_10.execute();
            } else {
            }
            println("Test if_failed");
            erase_all_27.execute();
            if (erase_all_27.pass) {
            } else {
                ERASE_FAILED_1_AB74CCF_FAILED = true;
            }
            erase_all_28.execute();
            if (erase_all_28.pass) {
            } else {
                ERASE_FAILED_2_AB74CCF_FAILED = true;
            }
            if (ERASE_FAILED_1_AB74CCF_FAILED == true) {
                margin_read1_all1_11.execute();
            } else {
            }
            if (ERASE_FAILED_2_AB74CCF_FAILED == true) {
                margin_read1_all1_12.execute();
            } else {
            }
            println("Test unless_failed");
            erase_all_29.execute();
            if (erase_all_29.pass) {
                ERASE_FAILED_3_AB74CCF_PASSED = true;
            } else {
            }
            erase_all_30.execute();
            if (erase_all_30.pass) {
                ERASE_FAILED_4_AB74CCF_PASSED = true;
            } else {
            }
            if (ERASE_FAILED_3_AB74CCF_PASSED == true) {
                margin_read1_all1_13.execute();
            } else {
            }
            if (ERASE_FAILED_4_AB74CCF_PASSED == true) {
                margin_read1_all1_14.execute();
            } else {
            }
            println("Test if_ran");
            erase_all_31.execute();
            ERASE_RAN_1_AB74CCF_RAN = true;
            erase_all_32.execute();
            ERASE_RAN_2_AB74CCF_RAN = true;
            if (ERASE_RAN_1_AB74CCF_RAN == true) {
                margin_read1_all1_15.execute();
            } else {
            }
            if (ERASE_RAN_2_AB74CCF_RAN == true) {
                margin_read1_all1_16.execute();
            } else {
            }
            println("Test unless_ran");
            erase_all_33.execute();
            ERASE_RAN_3_AB74CCF_RAN = true;
            erase_all_34.execute();
            ERASE_RAN_4_AB74CCF_RAN = true;
            if (ERASE_RAN_3_AB74CCF_RAN == true) {
            } else {
                margin_read1_all1_17.execute();
            }
            if (ERASE_RAN_4_AB74CCF_RAN == true) {
            } else {
                margin_read1_all1_18.execute();
            }
            println("Verify that job context wraps import");
            if (JOB == "FR") {
                // *******************************************************
                // GROUP - erase_2
                // *******************************************************
                    erase_all_35.execute();
                    erase_all_36.execute();
                    erase_all_37.execute();
                    erase_all_38.execute();
                    // *******************************************************
                    // GROUP - erase_vfy_2
                    // *******************************************************
                        margin_read1_all1_19.execute();
                    // *******************************************************
                    // /GROUP - erase_vfy_2
                    // *******************************************************
                // *******************************************************
                // /GROUP - erase_2
                // *******************************************************
            } else {
            }
            println("Verify that job context wraps enable block within an import");
            if (JOB == "FR") {
                // *******************************************************
                // GROUP - additional_erase
                // *******************************************************
                    if (ADDITIONAL_ERASE == true) {
                        erase_all_39.execute();
                    } else {
                    }
                    erase_all_40.execute();
                // *******************************************************
                // /GROUP - additional_erase
                // *******************************************************
            } else {
            }
            println("Verify that flow.cz works...");
            margin_read1_all1_20.execute();
            println("Verify that flow.cz works with enable words");
            if (USB_XCVR_CZ == true) {
                xcvr_fs_vilvih.execute();
                xcvr_fs_vilvih_1.execute();
                xcvr_fs_vilvih_2.execute();
                xcvr_fs_vilvih_3.execute();
            } else {
            }
            println("Verify that MTO template works...");
            println("Speed binning example bug from video 5");
            // *******************************************************
            // GROUP - 200Mhz Tests
            // *******************************************************
                test200_1.execute();
                if (test200_1.pass) {
                } else {
                    G200_AB74CCF_FAILED = true;
                }
                test200_2.execute();
                if (test200_2.pass) {
                } else {
                    G200_AB74CCF_FAILED = true;
                }
                test200_3.execute();
                if (test200_3.pass) {
                } else {
                    G200_AB74CCF_FAILED = true;
                }
            // *******************************************************
            // /GROUP - 200Mhz Tests
            // *******************************************************
            if (G200_AB74CCF_FAILED == true) {
                // *******************************************************
                // GROUP - 100Mhz Tests
                // *******************************************************
                    G100_AB74CCF_RAN = true;
                    test100_1.execute();
                    if (test100_1.pass) {
                    } else {
                        addBin(5);
                    }
                    test100_2.execute();
                    if (test100_2.pass) {
                    } else {
                        addBin(5);
                    }
                    test100_3.execute();
                    if (test100_3.pass) {
                    } else {
                        addBin(5);
                    }
                // *******************************************************
                // /GROUP - 100Mhz Tests
                // *******************************************************
            } else {
            }
            if (G100_AB74CCF_RAN == true) {
                addBin(2);
            } else {
            }
            println("Test node optimization within an if_failed branch");
            some_func_test.execute();
            if (some_func_test.pass) {
            } else {
                if (ALARM == true) {
                    addBin(10);
                } else {
                    addBin(11);
                }
                if (ALARMENABLED == true) {
                    addBin(12);
                } else {
                    addBin(13);
                }
            }
            addBin(1);
        // *******************************************************
        // /GROUP - prb1_main
        // *******************************************************
    }
}
